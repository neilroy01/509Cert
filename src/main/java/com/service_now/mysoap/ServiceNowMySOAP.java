
package com.service_now.mysoap;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.1-SNAPSHOT
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "ServiceNow_MySOAP", targetNamespace = "http://www.service-now.com/MySOAP", wsdlLocation = "https://dev50463.service-now.com/MySOAP.do?WSDL")
public class ServiceNowMySOAP
    extends Service
{

    private final static URL SERVICENOWMYSOAP_WSDL_LOCATION;
    private final static WebServiceException SERVICENOWMYSOAP_EXCEPTION;
    private final static QName SERVICENOWMYSOAP_QNAME = new QName("http://www.service-now.com/MySOAP", "ServiceNow_MySOAP");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("https://dev50463.service-now.com/MySOAP.do?WSDL");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        SERVICENOWMYSOAP_WSDL_LOCATION = url;
        SERVICENOWMYSOAP_EXCEPTION = e;
    }

    public ServiceNowMySOAP() {
        super(__getWsdlLocation(), SERVICENOWMYSOAP_QNAME);
    }

    public ServiceNowMySOAP(WebServiceFeature... features) {
        super(__getWsdlLocation(), SERVICENOWMYSOAP_QNAME, features);
    }

    public ServiceNowMySOAP(URL wsdlLocation) {
        super(wsdlLocation, SERVICENOWMYSOAP_QNAME);
    }

    public ServiceNowMySOAP(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICENOWMYSOAP_QNAME, features);
    }

    public ServiceNowMySOAP(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ServiceNowMySOAP(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ServiceNowSoap
     */
    @WebEndpoint(name = "ServiceNowSoap")
    public ServiceNowSoap getServiceNowSoap() {
        return super.getPort(new QName("http://www.service-now.com/MySOAP", "ServiceNowSoap"), ServiceNowSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServiceNowSoap
     */
    @WebEndpoint(name = "ServiceNowSoap")
    public ServiceNowSoap getServiceNowSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://www.service-now.com/MySOAP", "ServiceNowSoap"), ServiceNowSoap.class, features);
    }

    private static URL __getWsdlLocation() {
        if (SERVICENOWMYSOAP_EXCEPTION!= null) {
            throw SERVICENOWMYSOAP_EXCEPTION;
        }
        return SERVICENOWMYSOAP_WSDL_LOCATION;
    }
    
    /*
    public static void java.main(String[] args) {
    	HttpTransportPropertiesImpl.Authenticator basicAuth = new HttpTransportPropertiesImpl.Authenticator();
    	basicAuth.setUsername("wss_integration_usr");
    	basicAuth.setPassword("abcd1234");
    	basicAuth.setPreemptiveAuthentication(true);
    	ServiceNowMySOAP client = new ServiceNowMySOAP();
    	client.
    	ServiceNowSoap stub = client.getServiceNowSoap();
    	final Options clientOptions = stub._getServiceClient().getOptions();
    	clientOptions.setProperty(HTTPConstants.AUTHENTICATE, basicAuth);
    	clientOptions.setProperty(HTTPConstants.SO_TIMEOUT, new Integer(60000 ));
    	clientOptions.setProperty(HTTPConstants.CONNECTION_TIMEOUT, new Integer(60000 ));
    	clientOptions.setProperty(HTTPConstants.CHUNKED, "false");

    	stub.getServiceClient().setOptions(clientOptions);
    	stub.execute();
	}*/

}
